
//////////////////////////////////////////////////////////////////////
// Automatically generated by Bradley's GumpStudio and roadmaster's 
// exporter.dll,  Special thanks goes to Daegon whose work the exporter
// was based off of, and Shadow wolf for his Template Idea.
//////////////////////////////////////////////////////////////////////
#define RunUo2_0

using System;
using Server;
using Server.Gumps;
using Server.Network;
using Server.Commands;
using Server.Mobiles;
using Server.Fronteira.Talentos;
using Server.Items;
using System.Collections.Generic;

namespace Server.Gumps
{
    public class GumpHabilidades : Gump
    {
        private List<Talento> Talentos;

        public static void Initialize()
        {
            CommandSystem.Register("habilidades", AccessLevel.Administrator, new CommandEventHandler(_OnCommand));
        }

        [Usage("")]
        [Description("Makes a call to your custom gump.")]
        public static void _OnCommand(CommandEventArgs e)
        {
            var caller = e.Mobile as PlayerMobile;
            if (caller == null)
                return;

            var habs = caller.Talentos.Habilidades();

            if (habs.Count == 0)
            {
                caller.SendMessage("Aprenda habilidades aprendendo talentos usando .xp ou por pergaminhos pelo mundo");
                return;
            }

            if (caller.HasGump(typeof(GumpHabilidades)))
                caller.CloseGump(typeof(GumpHabilidades));
            caller.SendGump(new GumpHabilidades(caller, habs));
        }


        public GumpHabilidades(PlayerMobile player, List<Talento> habilidades) : base(0, 0)
        {
            Talentos = habilidades;
            this.Closable = true;
            this.Disposable = true;
            this.Dragable = true;
            this.Resizable = false;

            AddPage(0);
            AddBackground(191, 177, 231, 70, 9200);

            var botao = 1;
            var x = 0;
            foreach (var talentoHabilidade in habilidades)
            {
                var habilidade = Habilidade.Talentos[talentoHabilidade];
                var def = DefTalentos.GetDef(talentoHabilidade);
                AddButton(202 + x, 196, def.Icone, def.Icone, botao, GumpButtonType.Reply, 0);
                if (Habilidade.GetCurrentAbility(player) == habilidade)
                {
                    AddImage(214 + x, 182, 9906);
                }
                botao++;
                x += 52;
            }
        }



        public override void OnResponse(NetState sender, RelayInfo info)
        {
            Mobile from = sender.Mobile;
            Shard.Debug("Button "+info.ButtonID);
            if (info.ButtonID != 0)
            {
                var ativado = Talentos[info.ButtonID - 1];
                var habilidade = Habilidade.Talentos[ativado];
                Habilidade.SetCurrentAbility(from, habilidade);
                from.CloseGump(typeof(GumpHabilidades));
                from.SendGump(new GumpHabilidades(from as PlayerMobile, Talentos));
            }
        }
    }
}
